const MODEL = "meta-llama/llama-4-scout-17b-16e-instruct";
const ENDPOINT = "https://api.groq.com/openai/v1/chat/completions";
const TTS_ENDPOINT = "https://api.groq.com/openai/v1/audio/speech";

let API_KEY = null;

function loadApiKey() {
    return new Promise(resolve => {
        if (API_KEY) return resolve(API_KEY);
        chrome.storage.local.get(['API_KEY'], result => {
            API_KEY = result.API_KEY || null;
            resolve(API_KEY);
        });
    });
}

function showApiKeyPrompt() {
    stopCurrentAudio();
    popup?.remove();
    const overlay = document.createElement('div');
    overlay.className = 'xt-apikey-overlay';
    overlay.id = 'xt-apikey-overlay';
    const box = document.createElement('div');
    box.className = 'xt-apikey-box';
    box.innerHTML = `
        <div class="xt-apikey-title">
            <span>üîë</span> Nh·∫≠p API KEY ƒë·ªÉ s·ª≠ d·ª•ng d·ªãch
        </div>
        <div class="xt-apikey-desc">B·∫°n c·∫ßn nh·∫≠p API KEY ƒë·ªÉ s·ª≠ d·ª•ng ti·ªán √≠ch. API KEY s·∫Ω ƒë∆∞·ª£c l∆∞u b·∫£o m·∫≠t tr√™n m√°y b·∫°n.<br><br>Li√™n h·ªá <a href='https://www.facebook.com/nhb.xyz' target='_blank'>Facebook</a> ƒë·ªÉ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n l·∫•y API KEY.</div>
        <input id="xt-apikey-input" type="text" class="xt-apikey-input" placeholder="Nh·∫≠p API KEY t·∫°i ƒë√¢y..." />
        <button id="xt-apikey-save" class="xt-apikey-save">L∆∞u & s·ª≠ d·ª•ng</button>
        <div id="xt-apikey-error" class="xt-apikey-error"></div>
    `;
    overlay.appendChild(box);
    document.body.appendChild(overlay);
    const input = box.querySelector('#xt-apikey-input');
    const saveBtn = box.querySelector('#xt-apikey-save');
    const errorDiv = box.querySelector('#xt-apikey-error');
    saveBtn.onclick = () => {
        const key = input.value.trim();
        if (!key || key.length < 10) {
            errorDiv.textContent = 'API KEY kh√¥ng h·ª£p l·ªá!';
            errorDiv.style.display = 'block';
            return;
        }
        chrome.runtime.sendMessage({ action: "saveApiKey", key: key }, (response) => {
            if (response && response.success) {
                overlay.remove();
                showNotification('API KEY ƒë√£ ƒë∆∞·ª£c l∆∞u!', 'success');
            } else {
                errorDiv.textContent = 'L·ªói khi l∆∞u API Key!';
                errorDiv.style.display = 'block';
            }
        });
    };
    input.onkeydown = e => {
        if (e.key === 'Enter') saveBtn.click();
    };
}

async function translate(input, isSingleWord) {
    await loadApiKey();
    if (!API_KEY) {
        showApiKeyPrompt();
        return null;
    }
    const escapedInput = escapeSpecialChars(input);
    const prompt = isSingleWord ?
        `Tr·∫£ l·ªùi t·ª´ sau **ch·ªâ b·∫±ng JSON h·ª£p l·ªá**, kh√¥ng th√™m b·∫•t k·ª≥ ch·ªØ n√†o kh√°c, 100% kh√¥ng c√≥ markdown, kh√¥ng gi·∫£i th√≠ch, d·ªãch nghƒ©a c·ªßa t·ª´ v√† m√¥ t·∫£ ch·∫Øc ch·∫Øn ph·∫£i ƒë√∫ng chu·∫©n theo Oxford dictionary. Tr·∫£ ra duy nh·∫•t 1 JSON ·ªü d∆∞·ªõi 

Format JSON:

{
  "meaning": "",                        (nghƒ©a d·ªãch sang ti·∫øng Vi·ªát c·ªßa t·ª´, ng·∫Øn g·ªçn, ch√≠nh x√°c)
  "transcription": "",                  (phi√™n √¢m theo chu·∫©n IPA)
  "partOfSpeech": "",                   (ti·∫øng Vi·ªát, ch·ªâ d√πng: danh t·ª´, ƒë·∫°i t·ª´, t√≠nh t·ª´, ƒë·ªông t·ª´, tr·∫°ng t·ª´, gi·ªõi t·ª´, li√™n t·ª´, t·ª´ h·∫°n ƒë·ªãnh, th√°n t·ª´)
  "description": "",                    (m√¥ t·∫£ ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát)
  "examples": [],                       (2 v√≠ d·ª• b·∫±ng ti·∫øng Anh, ng·∫Øn g·ªçn, ƒë√∫ng ng·ªØ c·∫£nh)
  "examplesTranslated": [],             (d·ªãch 2 v√≠ d·ª• tr√™n sang ti·∫øng Vi·ªát, ƒë√∫ng ng·ªØ ph√°p)
  "synonyms": [],                       (d·∫°ng: "t·ª´ (lo·∫°i t·ª´): nghƒ©a", ƒë·∫ßy ƒë·ªß t·ª´ ƒë·ªìng nghƒ©a)
  "otherWordForms": []                  (d·∫°ng: "t·ª´ (lo·∫°i t·ª´): nghƒ©a", ƒë·∫ßy ƒë·ªß bi·∫øn th·ªÉ)
}

T·ª´ c·∫ßn d·ªãch: "${escapedInput.replace(/"/g, '\\"')}"` :
        `Tr·∫£ l·ªùi vƒÉn b·∫£n sau **ch·ªâ b·∫±ng JSON h·ª£p l·ªá**, kh√¥ng th√™m b·∫•t k·ª≥ ch·ªØ n√†o kh√°c, 100% kh√¥ng c√≥ markdown, kh√¥ng gi·∫£i th√≠ch. ƒê·ªëi v·ªõi vƒÉn b·∫£n ghi hoa to√†n b·ªô nh∆∞ n√†y: NOT GIVEN th√¨ t·ª± nh·∫≠n di·ªán vƒÉn b·∫£n ƒëang d·ªãch lu√¥n gi√∫p t·ªõ (l√† Not given ·∫•y, c√°i kh√°c t∆∞∆°ng t·ª± m√† tr·∫£ ra k·∫øt qu·∫£ JSON CH√çNH X√ÅC theo nh∆∞ cho ·ªü d∆∞·ªõi ƒë√¢y!). Tr·∫£ ra duy nh·∫•t 1 JSON ·ªü d∆∞·ªõi 

Format JSON:

{
  "original": "${escapedInput.replace(/"/g, '\\"')}",
  "transcription": "",                  (phi√™n √¢m theo chu·∫©n IPA c·ªßa ng√¥n ng·ªØ g·ªëc, n·∫øu theo d·∫°ng vi·∫øt hoa to√†n b·ªô th√¨ ƒë·ªÉ t·ª± nh·∫≠n di·ªán nh∆∞ tr√™n r·ªìi cho ra k·∫øt qu·∫£ phi√™n √¢m chu·∫©n IPA chu·∫©n)
  "translated": ""                      (d·ªãch sang ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, t·ª± nhi√™n, ƒë√∫ng ng·ªØ ph√°p)
}

VƒÉn b·∫£n c·∫ßn d·ªãch: "${escapedInput.replace(/"/g, '\\"')}"`;

    try {
        const response = await fetch(ENDPOINT, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${API_KEY}`
            },
            body: JSON.stringify({
                messages: [{ role: "user", content: prompt }],
                model: MODEL,
                temperature: 0.7,
                max_completion_tokens: 1024,
                top_p: 1,
                stream: false,
                stop: null
            })
        });

        if (!response.ok) throw new Error(`Translation API error: ${response.statusText}`);

        const { choices } = await response.json();
        const text = choices?.[0]?.message?.content || "";
        const cleanedText = cleanJson(text);

        try {
            return JSON.parse(cleanedText);
        } catch (parseErr) {
            console.error("Failed to parse JSON:", cleanedText, parseErr);
            const fixedText = cleanedText
                .replace(/(\w)"/g, '$1\\"')
                .replace(/\\(\s+)/g, '\\\\$1');
            try {
                return JSON.parse(fixedText);
            } catch (fixErr) {
                console.error("Failed to parse fixed JSON:", fixedText, fixErr);
                return null;
            }
        }
    } catch (err) {
        console.error("‚ùå Translation error:", err);
        return null;
    }
}

async function textToSpeech(text) {
    if (text.length > 10000) {
        showNotification("VƒÉn b·∫£n qu√° d√†i (h∆°n 10.000 k√Ω t·ª±). Vui l√≤ng r√∫t ng·∫Øn vƒÉn b·∫£n.");
        return null;
    }
    if (ttsAudioCache[text]) {
        return ttsAudioCache[text];
    }
    try {
        const response = await fetch(TTS_ENDPOINT, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${API_KEY}`
            },
            body: JSON.stringify({
                model: "playai-tts",
                input: text.slice(0, 10000),
                voice: "Arista-PlayAI",
                response_format: "wav"
            })
        });

        if (!response.ok) {
            let errMsg = "Kh√¥ng th·ªÉ t·∫°o √¢m thanh. Vui l√≤ng th·ª≠ l·∫°i.";
            try {
                const errJson = await response.json();
                if (errJson?.error?.code === "rate_limit_exceeded") {
                    errMsg =
                        "B·∫°n ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i v·ªõi vƒÉn b·∫£n ng·∫Øn h∆°n ho·∫∑c n√¢ng c·∫•p t√†i kho·∫£n!";
                }
            } catch {}
            showNotification(errMsg);
            return null;
        }

        const audioBlob = await response.blob();
        console.log("Audio Blob Type:", audioBlob.type);
        console.log("Audio Blob Size:", audioBlob.size);
        if (!audioBlob.type.includes("audio") || audioBlob.size === 0) {
            showNotification("File √¢m thanh kh√¥ng h·ª£p l·ªá t·ª´ API.", "error");
            return null;
        }

        try {
            const response = await new Promise((resolve, reject) => {
                chrome.runtime.sendMessage({
                    action: "saveAudio",
                    audioBlob: audioBlob
                }, response => {
                    if (chrome.runtime.lastError) {
                        reject(new Error(chrome.runtime.lastError.message));
                    } else {
                        resolve(response || {});
                    }
                });
            });

            if (response.error) {
                showNotification(response.error, "error");
                return null;
            }
            const audioUrl = response.fileUrl;
            if (audioUrl) {
                console.log("Generated File URL:", audioUrl);
                ttsAudioCache[text] = audioUrl;
                return audioUrl;
            }
        } catch (err) {
            console.error("L·ªói khi l∆∞u file √¢m thanh:", err);
            showNotification("Kh√¥ng th·ªÉ l∆∞u file √¢m thanh.", "error");
            return null;
        }

        showNotification("Kh√¥ng th·ªÉ t·∫°o URL √¢m thanh.", "error");
        return null;
    } catch (err) {
        console.error("‚ùå TTS error:", err);
        showNotification("Kh√¥ng th·ªÉ t·∫°o √¢m thanh. Vui l√≤ng th·ª≠ l·∫°i.", "error");
        return null;
    }
}